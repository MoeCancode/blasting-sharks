{"ast":null,"code":"var _jsxFileName = \"/Users/andrewmason/Desktop/bootcamp/blasting-sharks/client/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport shuffler from \"../utils/shuffler\";\nimport ModalP1 from \"./ModalP1\";\nimport ModalP2 from \"./ModalP2\";\nimport io from 'socket.io-client';\nimport fullname from \"../utils/fullname\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket;\nconst ENDPOINT = \"http://localhost:3001\";\n\nconst Game = () => {\n  _s();\n\n  //Websocet stuff\n  const [room, setRoom] = useState(\"ABCDE\");\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\"); //Modals\n\n  const [modalP1Show, setModalP1Show] = useState(false);\n  const [modalP2Show, setModalP2Show] = useState(false); //Game state\n\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState(\"\");\n  const [drawCardsPile, setDrawCardsPile] = useState([]);\n  const [playedCard, setPlayedCard] = useState(\"back\");\n  const [p1Cards, setP1Cards] = useState([\"ABC\", \"DEF\", \"GHI\"]);\n  const [p2Cards, setP2Cards] = useState([\"UVW\", \"XYZ\"]);\n  const [p1RemainingTurns, setP1RemainingTurns] = useState(0);\n  const [p2RemainingTurns, setP2RemainingTurns] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"\");\n  const [threeCards, setThreeCards] = useState([]); // HS = Hungry Shark (Exploding kitten)\n  // SG = Sacrificial goat (Defuser)\n  // DT = Double Trouble (Attack)\n  // CR = Communist Regime (Favor)\n  // SH = Shuffle\n  // SN = Snooze (Skip)\n  // DR = Divine Revelation (See the future)\n  // WC = White Crayon (Tacocat)\n\n  const cards = [\"SG\", \"SG\", \"SG\", \"SG\", \"DT\", \"DT\", \"DT\", \"DT\", \"CR\", \"CR\", \"CR\", \"CR\", \"SH\", \"SH\", \"SH\", \"SH\", \"SN\", \"SN\", \"SN\", \"SN\", \"DR\", \"DR\", \"DR\", \"DR\", \"DR\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\", \"WC\"]; //Initialize socket connection\n\n  useEffect(() => {\n    const connectionOptions = {\n      \"forceNew\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      room: room\n    }, error => {\n      if (error) setRoomFull(true);\n    }); //cleanup on component unmount\n\n    return function cleanup() {\n      socket.emit('disconnect'); //shut down connnection instance\n\n      socket.off();\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('initGameState', _ref => {\n      let {\n        gameOver,\n        activePlayer,\n        p1Cards,\n        p2Cards,\n        drawCardsPile,\n        p1RemainingTurns,\n        p2RemainingTurns\n      } = _ref;\n      setGameOver(gameOver);\n      setActivePlayer(activePlayer);\n      setP1Cards(p1Cards);\n      setP2Cards(p2Cards);\n      setDrawCardsPile(drawCardsPile);\n      setP1RemainingTurns(p1RemainingTurns);\n      setP2RemainingTurns(p2RemainingTurns);\n    });\n    socket.on('updateGameState', _ref2 => {\n      let {\n        gameOver,\n        winner,\n        activePlayer,\n        playedCard,\n        p1Cards,\n        p2Cards,\n        drawCardsPile,\n        p1RemainingTurns,\n        p2RemainingTurns,\n        threeCards,\n        modalP1Show,\n        modalP2Show\n      } = _ref2;\n      gameOver && setGameOver(gameOver);\n      winner && setWinner(winner);\n      activePlayer && setActivePlayer(activePlayer);\n      playedCard && setPlayedCard(playedCard);\n      p1Cards && setP1Cards(p1Cards);\n      p2Cards && setP2Cards(p2Cards);\n      drawCardsPile && setDrawCardsPile(drawCardsPile);\n      p1RemainingTurns !== null && setP1RemainingTurns(p1RemainingTurns);\n      p2RemainingTurns !== null && setP2RemainingTurns(p2RemainingTurns);\n      threeCards && setThreeCards(threeCards);\n      modalP1Show && setModalP1Show(modalP1Show);\n      modalP2Show && setModalP2Show(modalP2Show);\n    });\n    socket.on(\"roomData\", _ref3 => {\n      let {\n        users\n      } = _ref3;\n      setUsers(users);\n    });\n    socket.on('currentUserData', _ref4 => {\n      let {\n        name\n      } = _ref4;\n      setCurrentUser(name);\n      console.log(name);\n    });\n  }, []); // Setup game by distributing cards\n\n  useEffect(() => {\n    //Shuffle cards using our shuffler function\n    const shuffledCards = shuffler(cards); //Distribute 7 cards to each player and 1 Sacrificial goat card each\n\n    const cardsForP1 = shuffledCards.splice(0, 7);\n    cardsForP1.push(\"SG\");\n    const cardsForP2 = shuffledCards.splice(0, 7);\n    cardsForP2.push(\"SG\"); // Add remaining cards to the drawCardPile and insert shark and reshuffle;\n\n    const remainingCards = shuffledCards;\n    remainingCards.push(\"HS\");\n    const shuffledShark = shuffler(remainingCards); // Emit initial state to websocket\n\n    socket.emit('initGameState', {\n      drawCardsPile: [...shuffledShark],\n      p1Cards: [...cardsForP1],\n      p2Cards: [...cardsForP2],\n      gameOver: false,\n      p1RemainingTurns: 1,\n      p2RemainingTurns: 0,\n      activePlayer: \"P1\"\n    });\n  }, []); //Logic for action cards that player's play\n\n  function cardPlayedHandler(cardPlayed) {\n    const cardPlayedBy = activePlayer;\n    let playerRemainingTurns;\n    cardPlayedBy === \"P1\" ? playerRemainingTurns = p1RemainingTurns : playerRemainingTurns = p2RemainingTurns;\n\n    if (cardPlayedBy === \"P1\") {\n      const cardToRemove = p1Cards.indexOf(cardPlayed);\n      p1Cards.splice(cardToRemove, 1);\n    }\n\n    if (cardPlayedBy === \"P2\") {\n      const cardToRemove = p2Cards.indexOf(cardPlayed);\n      p2Cards.splice(cardToRemove, 1);\n    }\n\n    switch (cardPlayed) {\n      //---------------Logic for shuffle card---------------------//\n      //Make array that has all cards in draw pile\n      //Use shuffler function to shuffle that array\n      //Set state to be that shuffled array\n      case \"SH\":\n        {\n          let drawDeck = [...drawCardsPile];\n          drawDeck = shuffler(drawDeck); // setDrawCardsPile([...drawDeck]);\n\n          socket.emit(\"updateGameState\", {\n            drawCardsPile: [...drawDeck],\n            playedCard: cardPlayed\n          });\n          break;\n        }\n      //-----------------Logic for Snooze card----------------------------//\n      // Decrease current player's remaining turns by 1\n      //Check if he has no turns left. In that case end this player's turn and add 1 turn to other player\n      //If player still has a turn left, just decrement state of remaining turns for that player\n\n      case \"SN\":\n        {\n          playerRemainingTurns = playerRemainingTurns - 1;\n\n          if (playerRemainingTurns === 0) {\n            if (cardPlayedBy === \"P1\") {\n              // setP2RemainingTurns(p2RemainingTurns + 1);\n              // setP1RemainingTurns(playerRemainingTurns);\n              // setActivePlayer(\"P2\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p2RemainingTurns: p2RemainingTurns + 1,\n                p1RemainingTurns: playerRemainingTurns,\n                activePlayer: \"P2\"\n              });\n            } else if (cardPlayedBy === \"P2\") {\n              // setP1RemainingTurns(p1RemainingTurns + 1);\n              // setP2RemainingTurns(playerRemainingTurns);\n              // setActivePlayer(\"P1\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: p1RemainingTurns + 1,\n                p2RemainingTurns: playerRemainingTurns,\n                activePlayer: \"P1\"\n              });\n            }\n          } else if (playerRemainingTurns !== 0) {\n            if (cardPlayedBy === \"P1\") {\n              // setP1RemainingTurns(playerRemainingTurns);\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: playerRemainingTurns\n              });\n            } else if (cardPlayedBy === \"P2\") {\n              // setP2RemainingTurns(playerRemainingTurns);\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p2RemainingTurns: playerRemainingTurns\n              });\n            }\n          }\n\n          break;\n        }\n      //-----------------------Logic for Communist Regime card---------------------------//\n      //Grab a hold of current player's cards and opponent's cards\n      //Randomly remove 1 card from opponent's cards and add it to current player's cards\n      //Update states for both player's cards\n\n      case \"CR\":\n        {\n          let opponentsDeck;\n          let currentPlayersDeck;\n          cardPlayedBy === \"P1\" ? opponentsDeck = [...p2Cards] : opponentsDeck = [...p1Cards];\n          cardPlayedBy === \"P1\" ? currentPlayersDeck = [...p1Cards] : currentPlayersDeck = [...p2Cards];\n          let indexOfCardToRemove = Math.floor(Math.random() * opponentsDeck.length);\n          let cardToAdd = opponentsDeck.splice(indexOfCardToRemove, 1);\n          currentPlayersDeck.push(cardToAdd[0]);\n\n          if (cardPlayedBy === \"P1\") {\n            // setP1Cards([...currentPlayersDeck]);\n            // setP2Cards([...opponentsDeck]);\n            socket.emit(\"updateGameState\", {\n              playedCard: cardPlayed,\n              p1Cards: [...currentPlayersDeck],\n              p2Cards: [...opponentsDeck]\n            });\n          } else if (cardPlayedBy === \"P2\") {\n            // setP2Cards([...currentPlayersDeck]);\n            // setP1Cards([...opponentsDeck]);\n            socket.emit(\"updateGameState\", {\n              playedCard: cardPlayed,\n              p2Cards: [...currentPlayersDeck],\n              p1Cards: [...opponentsDeck]\n            });\n          }\n\n          break;\n        }\n      //-----------------------Logic for Divine Revelation card-------------------------//\n      //Make new empty array and populate it with the top 3 cards in our deck\n      //set state of threecads to that new array\n      //Display these cards to active player....??????\n\n      case \"DR\":\n        {\n          const topThreeCards = [];\n\n          for (let i = drawCardsPile.length - 1; i > drawCardsPile.length - 4; i--) {\n            topThreeCards.push(drawCardsPile[i]);\n          } // setThreeCards([...topThreeCards]);\n          // setModalP1Show(true);\n\n\n          if (activePlayer === \"P1\") {\n            socket.emit(\"updateGameState\", {\n              playedCard: cardPlayed,\n              threeCards: [...topThreeCards],\n              modalP1Show: true\n            });\n          } else if (activePlayer === \"P2\") {\n            socket.emit(\"updateGameState\", {\n              playedCard: cardPlayed,\n              threeCards: [...topThreeCards],\n              modalP2Show: true\n            });\n          }\n\n          break;\n        }\n      //----------------------------Logic for Double Trouble card---------------------------//\n      //Check if player has 1 or 2 remaining turns when he played the card\n      //If he had 1, end this player's turn and assign 2 turns to oppenent\n      //If he had 2, end this player's turn and assign 1 turn to opponent\n\n      case \"DT\":\n        {\n          if (playerRemainingTurns === 2) {\n            if (cardPlayedBy === \"P1\") {\n              // setP1RemainingTurns(playerRemainingTurns - 2);\n              // setP2RemainingTurns(1);\n              // setActivePlayer(\"P2\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: playerRemainingTurns - 2,\n                p2RemainingTurns: 1,\n                activePlayer: \"P2\"\n              });\n            } else if (cardPlayedBy === \"P2\") {\n              // setP2RemainingTurns(playerRemainingTurns - 2);\n              // setP1RemainingTurns(1);\n              // setActivePlayer(\"P1\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: 1,\n                p2RemainingTurns: playerRemainingTurns - 2,\n                activePlayer: \"P1\"\n              });\n            }\n          } else if (playerRemainingTurns === 1) {\n            if (cardPlayedBy === \"P1\") {\n              // setP1RemainingTurns(playerRemainingTurns - 1);\n              // setP2RemainingTurns(2);\n              // setActivePlayer(\"P2\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: playerRemainingTurns - 1,\n                p2RemainingTurns: 2,\n                activePlayer: \"P2\"\n              });\n            } else if (cardPlayedBy === \"P2\") {\n              // setP2RemainingTurns(playerRemainingTurns - 1);\n              // setP1RemainingTurns(2);\n              // setActivePlayer(\"P1\");\n              socket.emit(\"updateGameState\", {\n                playedCard: cardPlayed,\n                p1RemainingTurns: 2,\n                p2RemainingTurns: playerRemainingTurns - 1,\n                activePlayer: \"P1\"\n              });\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          console.log(\"Yes sir\");\n        }\n    }\n  } //Logic for when a player draws a card\n\n\n  function drawCardHandler() {\n    //Remove top card from card deck and check if it is hungry shark\n    //If it is not, add the card to current player's deck, decrease player's remaining turns by 1\n    //If the decrease in remaining turns caused them to be 0, add 1 remaining turn to opponent and set them as active\n    //If the card drawn is a Hungry shark, check player's hand to see if they have a sacrificial goat.\n    //If they do, remove goat from their hand and randomly insert HS back in the deck.\n    //Decrease their turns by 1\n    //If they dont have a goat, set game over to true, declare other player the winner, set played card to HS\n    // const cardPlayedBy = activePlayer;\n    // let playerRemainingTurns;\n    // cardPlayedBy === \"P1\" ? playerRemainingTurns = p1RemainingTurns : playerRemainingTurns = p2RemainingTurns;\n    let cardDeck = [...drawCardsPile];\n    let cardDrawn = cardDeck.pop();\n\n    if (activePlayer === \"P1\") {\n      if (cardDrawn === \"HS\") {\n        //Hungry shark handler\n        const p1Hand = [...p1Cards];\n        const goatCardIndex = p1Hand.indexOf(\"SG\");\n\n        if (goatCardIndex !== -1) {\n          p1Hand.splice(goatCardIndex, 1);\n          const randomIndex = Math.floor(Math.random() * cardDeck.length);\n          cardDeck.splice(randomIndex, 0, \"HS\"); // setP1Cards([...p1Hand]);\n          // setDrawCardsPile([...cardDeck]);\n          // setPlayedCard(\"SG\");\n          // setP1RemainingTurns(p1RemainingTurns - 1);\n\n          socket.emit(\"updateGameState\", {\n            p1Cards: [...p1Hand],\n            drawCardsPile: [...cardDeck],\n            playedCard: \"SG\",\n            p1RemainingTurns: p1RemainingTurns - 1\n          });\n\n          if (p1RemainingTurns === 0) {\n            // setP2RemainingTurns(p2RemainingTurns + 1);\n            // setActivePlayer(\"P2\");\n            socket.emit(\"updateGameState\", {\n              p2RemainingTurns: p2RemainingTurns + 1,\n              activePlayer: \"P2\"\n            });\n          }\n        } else {\n          // setPlayedCard(\"HS\");\n          // setGameOver(true);\n          // setWinner(\"P2\");\n          socket.emit(\"updateGameState\", {\n            playedCard: \"HS\",\n            gameOver: true,\n            winner: \"P2\"\n          });\n        }\n      } else {\n        const p1Turns = p1RemainingTurns - 1;\n        const rTurns = p1Turns; // setP1Cards([...p1Cards, cardDrawn]);\n        // setDrawCardsPile([...cardDeck]);\n        // setP1RemainingTurns(rTurns);\n\n        if (rTurns === 1) {\n          console.log(\"This was done as well\");\n          socket.emit(\"updateGameState\", {\n            p1Cards: [...p1Cards, cardDrawn],\n            drawCardsPile: [...cardDeck],\n            p1RemainingTurns: rTurns\n          });\n        } else if (rTurns === 0) {\n          // setP2RemainingTurns(p2RemainingTurns + 1);\n          // setActivePlayer(\"P2\");\n          console.log(\"This was done\");\n          socket.emit(\"updateGameState\", {\n            p2RemainingTurns: p2RemainingTurns + 1,\n            p1RemainingTurns: 0,\n            activePlayer: \"P2\"\n          });\n        }\n      }\n    } else if (activePlayer === \"P2\") {\n      if (cardDrawn === \"HS\") {\n        //Hungry shark handler\n        const p2Hand = [...p2Cards];\n        const goatCardIndex = p2Hand.indexOf(\"SG\");\n\n        if (goatCardIndex !== -1) {\n          p2Hand.splice(goatCardIndex, 1);\n          const randomIndex = Math.floor(Math.random() * cardDeck.length);\n          cardDeck.splice(randomIndex, 0, \"HS\"); // setP2Cards([...p2Hand]);\n          // setDrawCardsPile([...cardDeck]);\n          // setPlayedCard(\"SG\");\n          // setP2RemainingTurns(p2RemainingTurns - 1);\n\n          socket.emit(\"updateGameState\", {\n            p2Cards: [...p2Hand],\n            drawCardsPile: [...cardDeck],\n            playedCard: \"SG\",\n            p2RemainingTurns: p2RemainingTurns - 1\n          });\n\n          if (p2RemainingTurns === 0) {\n            // setP1RemainingTurns(p1RemainingTurns + 1);\n            // setActivePlayer(\"P1\");\n            socket.emit(\"updateGameState\", {\n              p1RemainingTurns: p1RemainingTurns + 1,\n              activePlayer: \"P1\"\n            });\n          }\n        } else {\n          // setPlayedCard(\"HS\");\n          // setGameOver(true);\n          // setWinner(\"P1\");\n          socket.emit(\"updateGameState\", {\n            playedCard: \"HS\",\n            gameOver: true,\n            winner: \"P1\"\n          });\n        }\n      } else {\n        let rTurns = p2RemainingTurns - 1; // setDrawCardsPile([...cardDeck]);\n        // setP2Cards([...p2Cards, cardDrawn]);\n        // setP2RemainingTurns(rTurns);\n\n        socket.emit(\"updateGameState\", {\n          drawCardsPile: [...cardDeck],\n          p2Cards: [...p2Cards, cardDrawn],\n          p2RemainingTurns: rTurns\n        });\n\n        if (rTurns === 0) {\n          // setP1RemainingTurns(p1RemainingTurns + 1);\n          // setActivePlayer(\"P1\");\n          socket.emit(\"updateGameState\", {\n            p1RemainingTurns: p1RemainingTurns + 1,\n            activePlayer: \"P1\"\n          });\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Game`,\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Game Code:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: winner !== \"\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"GAME OVER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [winner, \" wins!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currentUser === \"Player 1\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"P1 remaining turns: \", p1RemainingTurns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"P2 remaining turns: \", p2RemainingTurns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: {\n                pointerEvents: \"none\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"P2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 21\n              }, this), p2Cards.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"Card\",\n                  onClick: () => cardPlayedHandler(item),\n                  src: require(`../assets/back.png`)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 23\n              }, this)), activePlayer === \"P2\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: activePlayer === \"P2\" ? {\n                pointerEvents: \"none\"\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: activePlayer !== \"P1\",\n                onClick: drawCardHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 21\n              }, this), playedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"Card\",\n                  src: require(`../assets/${playedCard}.png`)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 561,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: fullname(playedCard)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 565,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 560,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: activePlayer === \"P1\" ? null : {\n                pointerEvents: \"none\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText text-white\",\n                children: \"P1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 21\n              }, this), p1Cards.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"player1DeckCards\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: fullname(item)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"Card\",\n                  onClick: () => cardPlayedHandler(item),\n                  src: require(`../assets/${item}.png`)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 23\n              }, this) // <span\n              // key={i}\n              // onClick={() => {\n              //   if(item !== \"WC\" && item !== \"SG\")\n              //   cardPlayedHandler(item)}}\n              // >{item} -\n              // </span>\n              )]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), currentUser === \"Player 2\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"P1 remaining turns: \", p1RemainingTurns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"P2 remaining turns: \", p2RemainingTurns]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: {\n                pointerEvents: \"none\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"P1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 21\n              }, this), p1Cards.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => cardPlayedHandler(item),\n                src: require(`../assets/back.png`)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 23\n              }, this) // <span>{item} - </span>\n              ), activePlayer === \"P1\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: activePlayer === \"P1\" ? {\n                pointerEvents: \"none\"\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: activePlayer !== \"P2\",\n                onClick: drawCardHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 629,\n                columnNumber: 21\n              }, this), playedCard && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: require(`../assets/${playedCard}.png`)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 23\n              }, this) // <h3>{playedCard}</h3>\n              ]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: activePlayer === \"P1\" ? {\n                pointerEvents: \"none\"\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"P2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 21\n              }, this), p2Cards.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => {\n                  if (item !== \"WC\" && item !== \"SG\") {\n                    cardPlayedHandler(item);\n                  }\n                },\n                src: require(`../assets/${item}.png`)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 23\n              }, this) // <span\n              //   key={i}\n              //   onClick={() => {\n              //     if (item !== \"WC\" && item !== \"SG\")\n              //       cardPlayedHandler(item);\n              //   }}\n              // >\n              //   {item} -\n              // </span>\n              )]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button red\",\n        children: \"QUIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 7\n    }, this), currentUser === \"Player 1\" ? modalP1Show && /*#__PURE__*/_jsxDEV(ModalP1, {\n      setModalOn: setModalP1Show,\n      card1: threeCards[0],\n      card2: threeCards[1],\n      card3: threeCards[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 9\n    }, this) : null, currentUser === \"Player 2\" ? modalP2Show && /*#__PURE__*/_jsxDEV(ModalP2, {\n      setModalOn: setModalP2Show,\n      card1: threeCards[0],\n      card2: threeCards[1],\n      card3: threeCards[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 504,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"PdTTOn/TMivAOB/Bd74GEWOcbbQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","useEffect","shuffler","ModalP1","ModalP2","io","fullname","socket","ENDPOINT","Game","room","setRoom","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","modalP1Show","setModalP1Show","modalP2Show","setModalP2Show","gameOver","setGameOver","winner","setWinner","drawCardsPile","setDrawCardsPile","playedCard","setPlayedCard","p1Cards","setP1Cards","p2Cards","setP2Cards","p1RemainingTurns","setP1RemainingTurns","p2RemainingTurns","setP2RemainingTurns","activePlayer","setActivePlayer","threeCards","setThreeCards","cards","connectionOptions","connect","emit","error","cleanup","off","on","name","console","log","shuffledCards","cardsForP1","splice","push","cardsForP2","remainingCards","shuffledShark","cardPlayedHandler","cardPlayed","cardPlayedBy","playerRemainingTurns","cardToRemove","indexOf","drawDeck","opponentsDeck","currentPlayersDeck","indexOfCardToRemove","Math","floor","random","length","cardToAdd","topThreeCards","i","drawCardHandler","cardDeck","cardDrawn","pop","p1Hand","goatCardIndex","randomIndex","p1Turns","rTurns","p2Hand","pointerEvents","map","item","require"],"sources":["/Users/andrewmason/Desktop/bootcamp/blasting-sharks/client/src/components/Game.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport shuffler from \"../utils/shuffler\";\nimport ModalP1 from \"./ModalP1\";\nimport ModalP2 from \"./ModalP2\";\nimport io from 'socket.io-client'\nimport fullname from \"../utils/fullname\"\n\nlet socket;\nconst ENDPOINT = \"http://localhost:3001\";\n\nconst Game = () => {\n  \n  //Websocet stuff\n  const [room, setRoom] = useState(\"ABCDE\");\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\");\n//Modals\n  const [modalP1Show, setModalP1Show] = useState(false);\n  const [modalP2Show, setModalP2Show] = useState(false);\n//Game state\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState(\"\");\n  const [drawCardsPile, setDrawCardsPile] = useState([]);\n  const [playedCard, setPlayedCard] = useState(\"back\");\n  const [p1Cards, setP1Cards] = useState([\"ABC\", \"DEF\", \"GHI\"]);\n  const [p2Cards, setP2Cards] = useState([\"UVW\", \"XYZ\"]);\n  const [p1RemainingTurns, setP1RemainingTurns] = useState(0);\n  const [p2RemainingTurns, setP2RemainingTurns] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"\");\n  const [threeCards, setThreeCards] = useState([]);\n\n  // HS = Hungry Shark (Exploding kitten)\n  // SG = Sacrificial goat (Defuser)\n  // DT = Double Trouble (Attack)\n  // CR = Communist Regime (Favor)\n  // SH = Shuffle\n  // SN = Snooze (Skip)\n  // DR = Divine Revelation (See the future)\n  // WC = White Crayon (Tacocat)\n  const cards = [\n    \"SG\",\"SG\",\"SG\",\"SG\",\"DT\",\"DT\",\"DT\",\"DT\",\"CR\",\"CR\",\"CR\",\"CR\",\"SH\",\"SH\",\"SH\",\"SH\",\"SN\",\"SN\",\"SN\",\"SN\",\"DR\",\"DR\",\"DR\",\"DR\",\"DR\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\"WC\",\n  ];\n//Initialize socket connection\n  useEffect(() => {\n    const connectionOptions =  {\n        \"forceNew\" : true,\n        \"reconnectionAttempts\": \"Infinity\", \n        \"timeout\" : 10000,                  \n        \"transports\" : [\"websocket\"]\n    }\n    socket = io.connect(ENDPOINT, connectionOptions)\n\n    socket.emit('join', {room: room}, (error) => {\n        if(error)\n            setRoomFull(true)\n    })\n\n    //cleanup on component unmount\n    return function cleanup() {\n        socket.emit('disconnect')\n        //shut down connnection instance\n        socket.off()\n    }\n}, [])\n\nuseEffect(() => {\n  socket.on('initGameState', ({ gameOver, activePlayer, p1Cards, p2Cards, drawCardsPile, p1RemainingTurns, p2RemainingTurns}) => {\n      setGameOver(gameOver)\n      setActivePlayer(activePlayer)\n      setP1Cards(p1Cards)\n      setP2Cards(p2Cards)\n      setDrawCardsPile(drawCardsPile)\n      setP1RemainingTurns(p1RemainingTurns)\n      setP2RemainingTurns(p2RemainingTurns);\n  })\n\n  socket.on('updateGameState', ({ gameOver, winner, activePlayer, playedCard, p1Cards, p2Cards, drawCardsPile, p1RemainingTurns, p2RemainingTurns, threeCards, modalP1Show, modalP2Show }) => {\n    gameOver && setGameOver(gameOver)\n    winner && setWinner(winner) \n    activePlayer && setActivePlayer(activePlayer)\n    playedCard && setPlayedCard(playedCard)\n    p1Cards && setP1Cards(p1Cards)\n    p2Cards && setP2Cards(p2Cards)\n    drawCardsPile && setDrawCardsPile(drawCardsPile)\n    p1RemainingTurns !== null && setP1RemainingTurns(p1RemainingTurns)\n    p2RemainingTurns !== null && setP2RemainingTurns(p2RemainingTurns)\n    threeCards && setThreeCards(threeCards)\n    modalP1Show && setModalP1Show(modalP1Show)\n    modalP2Show && setModalP2Show(modalP2Show);\n  })\n\n  socket.on(\"roomData\", ({ users }) => {\n      setUsers(users)\n  })\n\n  socket.on('currentUserData', ({ name }) => {\n      setCurrentUser(name)\n      console.log(name);\n  })\n\n  \n}, [])\n\n  // Setup game by distributing cards\n  useEffect(() => {\n    //Shuffle cards using our shuffler function\n    const shuffledCards = shuffler(cards);\n\n    //Distribute 7 cards to each player and 1 Sacrificial goat card each\n    const cardsForP1 = shuffledCards.splice(0, 7);\n    cardsForP1.push(\"SG\");\n\n    const cardsForP2 = shuffledCards.splice(0, 7);\n    cardsForP2.push(\"SG\");\n\n    // Add remaining cards to the drawCardPile and insert shark and reshuffle;\n    const remainingCards = shuffledCards;\n    remainingCards.push(\"HS\");\n    const shuffledShark = shuffler(remainingCards);\n\n    // Emit initial state to websocket\n    socket.emit('initGameState', {\n    drawCardsPile:[...shuffledShark],\n    p1Cards: [...cardsForP1],\n    p2Cards: [...cardsForP2],\n    gameOver: false,\n    p1RemainingTurns: 1,\n    p2RemainingTurns: 0,\n    activePlayer: \"P1\",\n    })\n\n    \n  }, []);\n\n  //Logic for action cards that player's play\n  function cardPlayedHandler(cardPlayed) {\n    const cardPlayedBy = activePlayer;\n    let playerRemainingTurns;\n    cardPlayedBy === \"P1\"\n      ? (playerRemainingTurns = p1RemainingTurns)\n      : (playerRemainingTurns = p2RemainingTurns);\n\n    if (cardPlayedBy === \"P1\") {\n      const cardToRemove = p1Cards.indexOf(cardPlayed);\n      p1Cards.splice(cardToRemove, 1);\n    }\n    if (cardPlayedBy === \"P2\") {\n      const cardToRemove = p2Cards.indexOf(cardPlayed);\n      p2Cards.splice(cardToRemove, 1);\n    }\n\n    switch (cardPlayed) {\n      //---------------Logic for shuffle card---------------------//\n\n      //Make array that has all cards in draw pile\n      //Use shuffler function to shuffle that array\n      //Set state to be that shuffled array\n      case \"SH\": {\n\n        let drawDeck = [...drawCardsPile];\n        drawDeck = shuffler(drawDeck);\n        // setDrawCardsPile([...drawDeck]);\n\n        socket.emit(\"updateGameState\", ({\n          drawCardsPile: [...drawDeck],\n          playedCard: cardPlayed \n        }))\n\n        break;\n      }\n\n      //-----------------Logic for Snooze card----------------------------//\n\n      // Decrease current player's remaining turns by 1\n      //Check if he has no turns left. In that case end this player's turn and add 1 turn to other player\n      //If player still has a turn left, just decrement state of remaining turns for that player\n      case \"SN\": {\n\n        playerRemainingTurns = playerRemainingTurns - 1;\n        if (playerRemainingTurns === 0) {\n          if (cardPlayedBy === \"P1\") {\n            // setP2RemainingTurns(p2RemainingTurns + 1);\n            // setP1RemainingTurns(playerRemainingTurns);\n            // setActivePlayer(\"P2\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p2RemainingTurns: p2RemainingTurns + 1,\n              p1RemainingTurns: playerRemainingTurns,\n              activePlayer: \"P2\"\n            }))\n\n          } else if (cardPlayedBy === \"P2\") {\n            // setP1RemainingTurns(p1RemainingTurns + 1);\n            // setP2RemainingTurns(playerRemainingTurns);\n            // setActivePlayer(\"P1\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: p1RemainingTurns + 1,\n              p2RemainingTurns: playerRemainingTurns,\n              activePlayer: \"P1\"\n            }))\n          }\n        } else if (playerRemainingTurns !== 0) {\n          if (cardPlayedBy === \"P1\") {\n            // setP1RemainingTurns(playerRemainingTurns);\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: playerRemainingTurns\n            }))\n          } else if (cardPlayedBy === \"P2\") {\n            // setP2RemainingTurns(playerRemainingTurns);\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p2RemainingTurns: playerRemainingTurns\n            }))\n          }\n        }\n        break;\n      }\n\n      //-----------------------Logic for Communist Regime card---------------------------//\n\n      //Grab a hold of current player's cards and opponent's cards\n      //Randomly remove 1 card from opponent's cards and add it to current player's cards\n      //Update states for both player's cards\n      case \"CR\": {\n\n        let opponentsDeck;\n        let currentPlayersDeck;\n        cardPlayedBy === \"P1\"\n          ? (opponentsDeck = [...p2Cards])\n          : (opponentsDeck = [...p1Cards]);\n        cardPlayedBy === \"P1\"\n          ? (currentPlayersDeck = [...p1Cards])\n          : (currentPlayersDeck = [...p2Cards]);\n\n        let indexOfCardToRemove = Math.floor(\n          Math.random() * opponentsDeck.length\n        );\n        let cardToAdd = opponentsDeck.splice(indexOfCardToRemove, 1);\n        currentPlayersDeck.push(cardToAdd[0]);\n\n        if (cardPlayedBy === \"P1\") {\n          // setP1Cards([...currentPlayersDeck]);\n          // setP2Cards([...opponentsDeck]);\n          socket.emit(\"updateGameState\", ({\n            playedCard: cardPlayed,\n            p1Cards: [...currentPlayersDeck],\n            p2Cards: [...opponentsDeck],\n          }))\n        } else if (cardPlayedBy === \"P2\") {\n          // setP2Cards([...currentPlayersDeck]);\n          // setP1Cards([...opponentsDeck]);\n          socket.emit(\"updateGameState\", ({\n            playedCard: cardPlayed,\n            p2Cards: [...currentPlayersDeck],\n            p1Cards: [...opponentsDeck]\n          }))\n        }\n        break;\n      }\n\n      //-----------------------Logic for Divine Revelation card-------------------------//\n\n      //Make new empty array and populate it with the top 3 cards in our deck\n      //set state of threecads to that new array\n      //Display these cards to active player....??????\n      case \"DR\": {\n\n        const topThreeCards = [];\n        for (\n          let i = drawCardsPile.length - 1;\n          i > drawCardsPile.length - 4;\n          i--\n        ) {\n          topThreeCards.push(drawCardsPile[i]);\n        }\n        // setThreeCards([...topThreeCards]);\n        // setModalP1Show(true);\n        if(activePlayer === \"P1\") {\n        socket.emit(\"updateGameState\", ({\n          playedCard: cardPlayed,\n          threeCards: [...topThreeCards],\n          modalP1Show: true\n        }))\n      }\n        else if(activePlayer === \"P2\"){\n          socket.emit(\"updateGameState\", ({\n            playedCard: cardPlayed,\n            threeCards: [...topThreeCards],\n            modalP2Show: true\n          }))\n        }\n        break;\n      }\n\n      //----------------------------Logic for Double Trouble card---------------------------//\n\n      //Check if player has 1 or 2 remaining turns when he played the card\n      //If he had 1, end this player's turn and assign 2 turns to oppenent\n      //If he had 2, end this player's turn and assign 1 turn to opponent\n      case \"DT\": {\n\n        if (playerRemainingTurns === 2) {\n          if (cardPlayedBy === \"P1\") {\n            // setP1RemainingTurns(playerRemainingTurns - 2);\n            // setP2RemainingTurns(1);\n            // setActivePlayer(\"P2\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: playerRemainingTurns -2,\n              p2RemainingTurns: 1,\n              activePlayer: \"P2\"\n            }))\n          } else if (cardPlayedBy === \"P2\") {\n            // setP2RemainingTurns(playerRemainingTurns - 2);\n            // setP1RemainingTurns(1);\n            // setActivePlayer(\"P1\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: 1,\n              p2RemainingTurns: playerRemainingTurns - 2,\n              activePlayer: \"P1\"\n            }))\n          }\n        } else if (playerRemainingTurns === 1) {\n          if (cardPlayedBy === \"P1\") {\n            // setP1RemainingTurns(playerRemainingTurns - 1);\n            // setP2RemainingTurns(2);\n            // setActivePlayer(\"P2\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: playerRemainingTurns - 1,\n              p2RemainingTurns: 2,\n              activePlayer: \"P2\"\n            }))\n          } else if (cardPlayedBy === \"P2\") {\n            // setP2RemainingTurns(playerRemainingTurns - 1);\n            // setP1RemainingTurns(2);\n            // setActivePlayer(\"P1\");\n            socket.emit(\"updateGameState\", ({\n              playedCard: cardPlayed,\n              p1RemainingTurns: 2,\n              p2RemainingTurns: playerRemainingTurns - 1,\n              activePlayer: \"P1\"\n            }))\n          }\n        }\n        break;\n      }\n\n      default: {\n        console.log(\"Yes sir\");\n      }\n    }\n  }\n\n  //Logic for when a player draws a card\n  function drawCardHandler() {\n    //Remove top card from card deck and check if it is hungry shark\n    //If it is not, add the card to current player's deck, decrease player's remaining turns by 1\n    //If the decrease in remaining turns caused them to be 0, add 1 remaining turn to opponent and set them as active\n\n    //If the card drawn is a Hungry shark, check player's hand to see if they have a sacrificial goat.\n    //If they do, remove goat from their hand and randomly insert HS back in the deck.\n    //Decrease their turns by 1\n    //If they dont have a goat, set game over to true, declare other player the winner, set played card to HS\n\n    // const cardPlayedBy = activePlayer;\n    // let playerRemainingTurns;\n    // cardPlayedBy === \"P1\" ? playerRemainingTurns = p1RemainingTurns : playerRemainingTurns = p2RemainingTurns;\n\n    let cardDeck = [...drawCardsPile];\n    let cardDrawn = cardDeck.pop();\n    if (activePlayer === \"P1\") {\n      if (cardDrawn === \"HS\") {\n        //Hungry shark handler\n        const p1Hand = [...p1Cards];\n        const goatCardIndex = p1Hand.indexOf(\"SG\");\n        if (goatCardIndex !== -1) {\n          p1Hand.splice(goatCardIndex, 1);\n          const randomIndex = Math.floor(Math.random() * cardDeck.length);\n          cardDeck.splice(randomIndex, 0, \"HS\");\n          \n          // setP1Cards([...p1Hand]);\n          // setDrawCardsPile([...cardDeck]);\n          // setPlayedCard(\"SG\");\n          // setP1RemainingTurns(p1RemainingTurns - 1);\n          socket.emit(\"updateGameState\", ({\n            p1Cards: [...p1Hand],\n            drawCardsPile: [...cardDeck],\n            playedCard: \"SG\",\n            p1RemainingTurns: p1RemainingTurns - 1\n          }))\n\n          if (p1RemainingTurns === 0) {\n            // setP2RemainingTurns(p2RemainingTurns + 1);\n            // setActivePlayer(\"P2\");\n            socket.emit(\"updateGameState\", ({\n              p2RemainingTurns: p2RemainingTurns + 1,\n              activePlayer: \"P2\"\n            }))\n          }\n        } else {\n          // setPlayedCard(\"HS\");\n          // setGameOver(true);\n          // setWinner(\"P2\");\n          socket.emit(\"updateGameState\", ({\n            playedCard: \"HS\",\n            gameOver: true,\n            winner: \"P2\"\n          }))\n        }\n      } else {\n        const p1Turns = p1RemainingTurns -1;\n        const rTurns = p1Turns;\n        // setP1Cards([...p1Cards, cardDrawn]);\n        // setDrawCardsPile([...cardDeck]);\n        // setP1RemainingTurns(rTurns);\n        if(rTurns === 1) {\n          console.log(\"This was done as well\")\n        socket.emit(\"updateGameState\", ({\n          p1Cards: [...p1Cards, cardDrawn],\n          drawCardsPile: [...cardDeck],\n          p1RemainingTurns: rTurns\n        }))\n      }\n\n        else if (rTurns === 0) {\n          // setP2RemainingTurns(p2RemainingTurns + 1);\n          // setActivePlayer(\"P2\");\n          console.log(\"This was done\")\n          socket.emit(\"updateGameState\", ({\n            p2RemainingTurns: p2RemainingTurns + 1,\n            p1RemainingTurns: 0,\n            activePlayer: \"P2\"\n          }))\n        }\n      }\n    } else if (activePlayer === \"P2\") {\n      if (cardDrawn === \"HS\") {\n        //Hungry shark handler\n        const p2Hand = [...p2Cards];\n        const goatCardIndex = p2Hand.indexOf(\"SG\");\n        if (goatCardIndex !== -1) {\n          p2Hand.splice(goatCardIndex, 1);\n          \n          const randomIndex = Math.floor(Math.random() * cardDeck.length);\n          cardDeck.splice(randomIndex, 0, \"HS\");\n          // setP2Cards([...p2Hand]);\n          // setDrawCardsPile([...cardDeck]);\n          // setPlayedCard(\"SG\");\n          // setP2RemainingTurns(p2RemainingTurns - 1);\n          socket.emit(\"updateGameState\", ({\n            p2Cards: [...p2Hand],\n            drawCardsPile: [...cardDeck],\n            playedCard: \"SG\",\n            p2RemainingTurns: p2RemainingTurns - 1\n          }))\n\n          if (p2RemainingTurns === 0) {\n            // setP1RemainingTurns(p1RemainingTurns + 1);\n            // setActivePlayer(\"P1\");\n            socket.emit(\"updateGameState\", ({\n              p1RemainingTurns: p1RemainingTurns + 1,\n              activePlayer: \"P1\"\n            }))\n          }\n        } else {\n          // setPlayedCard(\"HS\");\n          // setGameOver(true);\n          // setWinner(\"P1\");\n          socket.emit(\"updateGameState\", ({\n            playedCard: \"HS\",\n            gameOver: true,\n            winner: \"P1\"\n          }))\n        }\n      } else {\n        let rTurns = p2RemainingTurns - 1;\n        // setDrawCardsPile([...cardDeck]);\n        // setP2Cards([...p2Cards, cardDrawn]);\n        // setP2RemainingTurns(rTurns);\n        socket.emit(\"updateGameState\", ({\n          drawCardsPile: [...cardDeck],\n          p2Cards: [...p2Cards, cardDrawn],\n          p2RemainingTurns: rTurns\n        }))\n        if (rTurns === 0) {\n          // setP1RemainingTurns(p1RemainingTurns + 1);\n          // setActivePlayer(\"P1\");\n          socket.emit(\"updateGameState\", ({\n            p1RemainingTurns: p1RemainingTurns + 1,\n            activePlayer: \"P1\"\n          }))\n        }\n      }\n    }\n  }\n  \n\n  return (\n    <div className={`Game`}>\n      <>\n        <div className=\"topInfo\">\n          <h1>Game Code:</h1>\n        </div>\n\n        <>\n          {gameOver ? (\n            <div>\n              {winner !== \"\" && (\n                <>\n                  <h1>GAME OVER</h1>\n                  <h2>{winner} wins!</h2>\n                </>\n              )}\n            </div>\n          ) : (\n            <div>\n              {/* P1 VIEW */}\n              {currentUser === \"Player 1\" && (\n                <>\n                <h3>P1 remaining turns: {p1RemainingTurns}</h3>\n                <h3>P2 remaining turns: {p2RemainingTurns}</h3>\n                  <div\n                    className=\"player2Deck\"\n                    style={{ pointerEvents: \"none\" }}\n                  >\n                    <p className=\"playerDeckText\">P2</p>\n                    {p2Cards.map((item, i) => (\n                      <div>\n                      <img\n                        key={i}\n                        className=\"Card\"\n                        onClick={() => cardPlayedHandler(item)}\n                        src={require(`../assets/back.png`)}\n                      />\n                      </div>\n                    ))}\n                    {activePlayer === \"P2\"}\n                  </div>\n                  <br />\n                  <div\n                    className=\"middleInfo\"\n                    style={\n                      activePlayer === \"P2\" ? { pointerEvents: \"none\" } : null\n                    }\n                  >\n                    <button\n                      className=\"game-button\"\n                      disabled={activePlayer !== \"P1\"}\n                      onClick={drawCardHandler}\n                    >\n                      DRAW CARD\n                    </button>\n                    {\n                      playedCard && (\n                        <div>\n                        <img\n                          className=\"Card\"\n                          src={require(`../assets/${playedCard}.png`)}\n                        />\n                        <h3>{fullname(playedCard)}</h3>\n                      </div>\n                      )\n                       \n                    }\n                  </div>\n                  <br />\n                  <div\n                    className=\"player1Deck\"\n                    style={\n                      activePlayer === \"P1\" ? null : { pointerEvents: \"none\" }\n                    }\n                  >\n                    <p className=\"playerDeckText text-white\">P1</p>\n                    {p1Cards.map((item, i) => (\n                      <div className=\"player1DeckCards\">\n                      <span>{fullname(item)}</span>\n                      <img\n                        key={i}\n                        className=\"Card\"\n                        onClick={() => cardPlayedHandler(item)}\n                        src={require(`../assets/${item}.png`)}\n                      />\n                      </div>\n                      // <span\n                      // key={i}\n                      // onClick={() => {\n                      //   if(item !== \"WC\" && item !== \"SG\")\n                      //   cardPlayedHandler(item)}}\n                      // >{item} -\n                      // </span>\n                    ))}\n                  </div>\n                </>\n              )}\n\n              {/* P2 VIEW */}\n              {currentUser === \"Player 2\" && (\n                <>\n                <h3>P1 remaining turns: {p1RemainingTurns}</h3>\n                <h3>P2 remaining turns: {p2RemainingTurns}</h3>\n                  <div\n                    className=\"player1Deck\"\n                    style={{ pointerEvents: \"none\" }}\n                  >\n                    <p className=\"playerDeckText\">P1</p>\n                    {p1Cards.map((item, i) => (\n                      <img\n                          key={i}\n                          className='Card'\n                          onClick={() => cardPlayedHandler(item)}\n                          src={require(`../assets/back.png`)}\n                          />\n                      // <span>{item} - </span>\n                    ))}\n                    {activePlayer === \"P1\"}\n                  </div>\n                  <br />\n                  <div\n                    className=\"middleInfo\"\n                    style={\n                      activePlayer === \"P1\" ? { pointerEvents: \"none\" } : null\n                    }\n                  >\n                    <button\n                      className=\"game-button\"\n                      disabled={activePlayer !== \"P2\"}\n                      onClick={drawCardHandler}\n                    >\n                      DRAW CARD\n                    </button>\n                    {playedCard && (\n                      <img\n                          className='Card'\n                          src={require(`../assets/${playedCard}.png`)}\n                          />\n                      // <h3>{playedCard}</h3>\n                    )}\n                  </div>\n                  <br />\n                  <div\n                    className=\"player2Deck\"\n                    style={\n                      activePlayer === \"P1\" ? { pointerEvents: \"none\" } : null\n                    }\n                  >\n                    <p className=\"playerDeckText\">P2</p>\n                    {p2Cards.map((item, i) => (\n                      <img\n                          key={i}\n                          className='Card'\n                          onClick={() => {\n                            if(item!== \"WC\" && item !== \"SG\")\n                              {cardPlayedHandler(item)}}}\n                          src={require(`../assets/${item}.png`)}\n                          />\n                      // <span\n                      //   key={i}\n                      //   onClick={() => {\n                      //     if (item !== \"WC\" && item !== \"SG\")\n                      //       cardPlayedHandler(item);\n                      //   }}\n                      // >\n                      //   {item} -\n                      // </span>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </>\n      </>\n\n      <br />\n      <a href=\"/\">\n        <button className=\"game-button red\">QUIT</button>\n      </a>\n\n      {/* Modals down here */}\n      {currentUser === \"Player 1\" ? modalP1Show && (\n        <ModalP1\n          setModalOn={setModalP1Show}\n          card1={threeCards[0]}\n          card2={threeCards[1]}\n          card3={threeCards[2]}\n        />\n      ): null}\n      {currentUser === \"Player 2\" ? modalP2Show && (\n        <ModalP2\n          setModalOn={setModalP2Show}\n          card1={threeCards[0]}\n          card2={threeCards[1]}\n          card3={threeCards[2]}\n        />\n      ): null}\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}